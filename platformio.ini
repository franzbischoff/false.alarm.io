; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
description = Model Implementation of 'false.alarm'
src_dir = src
lib_dir = lib
boards_dir = boards
build_cache_dir = .cache
build_dir = build
default_envs = linux_native

[env]
upload_port = /dev/ttyUSB0
debug_port = /dev/ttyUSB0
monitor_port = /dev/ttyUSB0
monitor_speed = 115200
lib_ldf_mode = chain+
lib_compat_mode = strict
check_skip_packages = yes

[custom]
cpp_mode = -std=c++11
extra_flags = -DNO_STL

; [release]
; build_type = release
; build_flags = -O2 -DNDEBUG -DUNICODE -D_UNICODE ${custom.cpp_mode} -Wall -D_FORTIFY_SOURCE=1 -fdiagnostics-color=always ${custom.extra_flags}
; build_unflags = -O0 -DDEBUG

; [debug]
; check_skip_packages = yes

; [env:raspi2b]
; extends =
; 	debug
; 	release
; platform = linux_arm
; board = raspberrypi_2b
; check_tool = cppcheck
; check_flags =
; 	--std=${custom.cpp_mode}
; 	--language=c++
; 	--platform=unix32
; 	-DDEBUG=1
; 	cppcheck:
; 	--addon=cert.py

; [env:raspi3b]
; extends =
; 	debug
; 	release
; platform = linux_arm
; board = raspberrypi_3b
; check_tool = cppcheck
; check_flags =
; 	--std=${custom.cpp_mode}
; 	--language=c++
; 	--platform=unix32
; 	-DDEBUG=1
; 	cppcheck:
; 	--addon=cert.py

[env:linux_native]
build_type = debug
build_flags = -O0 -ggdb3 -g3 -DDEBUG -DUNICODE -D_UNICODE -Wall -fdiagnostics-color=always
debug_build_flags = -O0 -ggdb3 -g3 -DDEBUG -DUNICODE -D_UNICODE -Wall -fdiagnostics-color=always
platform = linux_native
framework = linux_native
board = linux_native

[env:windows_native]
build_type = debug
build_flags = -O0 -ggdb3 -g3 -DDEBUG -DUNICODE -D_UNICODE -Wall -fdiagnostics-color=always
debug_build_flags = -O0 -ggdb3 -g3 -DDEBUG -DUNICODE -D_UNICODE -Wall -fdiagnostics-color=always
platform = windows_native
framework = windows_native
board = windows_native

; [env:linux_x86_64]
; extends = release, debug
; platform = linux_x86_64

[env:arduino_nano]
build_type = debug
platform = atmelavr
board = nanoatmega328
framework = arduino
build_flags = -D__AVR_ATmega328P__ -D__AVR_ATmega328__
debug_tool = avr-stub
debug_build_flags = -D__AVR_ATmega328P__ -D__AVR_ATmega328__ -O0 -ggdb3 -g3 -DDEBUG -DUNICODE -D_UNICODE ${custom.cpp_mode} -Wall -fdiagnostics-color=always ${custom.extra_flags}

[env:arduino_mega]
build_type = release
platform = atmelavr
board = megaatmega1280
framework = arduino
build_flags = -D__AVR_ATmega1280__
debug_tool = avr-stub
debug_build_flags = -D__AVR_ATmega1280__

[env:esp32doino]
build_type = release
platform = espressif32
board = esp32doit-devkit-v1
build_flags = -DCONFIG_BLINK_GPIO=2 -DPIO_FRAMEWORK_ESP_IDF_ENABLE_EXCEPTIONS -DARDUINO_ESP32_DEV -O2 -DNDEBUG -DUNICODE -D_UNICODE
; debug_build_flags = -DCORE_DEBUG_LEVEL=5 -DPIO_FRAMEWORK_ESP_IDF_ENABLE_EXCEPTIONS -DARDUINO_ESP32_DEV
framework = arduino
upload_resetmethod = nodemcu
upload_protocol = esptool

; [env:esp32doit]
; extends =
; 	debug
; 	release
; platform = espressif32
; board = esp32doit-devkit-v1
; build_flags = -DCONFIG_BLINK_GPIO=2 -DPIO_FRAMEWORK_ESP_IDF_ENABLE_EXCEPTIONS -D ESP32_IDF_DEV ${release.build_flags}
; debug_build_flags = -DPIO_FRAMEWORK_ESP_IDF_ENABLE_EXCEPTIONS -DESP32_IDF_DEV ${debug.debug_build_flags}
; framework = espidf
; upload_resetmethod = nodemcu
; upload_protocol = esptool
